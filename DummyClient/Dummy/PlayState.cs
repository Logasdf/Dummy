// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PlayState.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Protobuf.State {

  /// <summary>Holder for reflection information generated from PlayState.proto</summary>
  public static partial class PlayStateReflection {

    #region Descriptor
    /// <summary>File descriptor for PlayState.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9QbGF5U3RhdGUucHJvdG8SBXN0YXRlIi8KDFZlY3RvcjNQcm90bxIJCgF4",
            "GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEoAiKCAQoOVHJhbnNmb3JtUHJv",
            "dG8SJQoIcG9zaXRpb24YASABKAsyEy5zdGF0ZS5WZWN0b3IzUHJvdG8SJQoI",
            "cm90YXRpb24YAiABKAsyEy5zdGF0ZS5WZWN0b3IzUHJvdG8SIgoFc2NhbGUY",
            "AyABKAsyEy5zdGF0ZS5WZWN0b3IzUHJvdG8ioQEKCVBsYXlTdGF0ZRIoCgl0",
            "cmFuc2Zvcm0YASABKAsyFS5zdGF0ZS5UcmFuc2Zvcm1Qcm90bxIRCglhbmlt",
            "U3RhdGUYAiABKAUSDgoGaGVhbHRoGAMgASgFEhEKCWtpbGxDb3VudBgEIAEo",
            "BRISCgpkZWF0aENvdW50GAUgASgFEg4KBnJvb21JZBgGIAEoBRIQCghjbG50",
            "TmFtZRgHIAEoCSI0CghIaXRTdGF0ZRIMCgRmcm9tGAEgASgJEgoKAnRvGAIg",
            "ASgJEg4KBmRhbWFnZRgDIAEoBSLhAQoKV29ybGRTdGF0ZRIOCgZyb29tSWQY",
            "ASABKAUSEAoIY2xudE5hbWUYAiABKAkSKAoJdHJhbnNmb3JtGAMgASgLMhUu",
            "c3RhdGUuVHJhbnNmb3JtUHJvdG8SDQoFZmlyZWQYBCABKAgSDgoGaGVhbHRo",
            "GAUgASgFEgsKA2hpdBgGIAEoCBIhCghoaXRTdGF0ZRgHIAEoCzIPLnN0YXRl",
            "LkhpdFN0YXRlEhEKCWtpbGxQb2ludBgIIAEoBRISCgpkZWF0aFBvaW50GAkg",
            "ASgFEhEKCWFuaW1TdGF0ZRgKIAEoBUIYqgIVR29vZ2xlLlByb3RvYnVmLlN0",
            "YXRlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.State.Vector3Proto), global::Google.Protobuf.State.Vector3Proto.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.State.TransformProto), global::Google.Protobuf.State.TransformProto.Parser, new[]{ "Position", "Rotation", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.State.PlayState), global::Google.Protobuf.State.PlayState.Parser, new[]{ "Transform", "AnimState", "Health", "KillCount", "DeathCount", "RoomId", "ClntName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.State.HitState), global::Google.Protobuf.State.HitState.Parser, new[]{ "From", "To", "Damage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.State.WorldState), global::Google.Protobuf.State.WorldState.Parser, new[]{ "RoomId", "ClntName", "Transform", "Fired", "Health", "Hit", "HitState", "KillPoint", "DeathPoint", "AnimState" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Vector3Proto : pb::IMessage<Vector3Proto> {
    private static readonly pb::MessageParser<Vector3Proto> _parser = new pb::MessageParser<Vector3Proto>(() => new Vector3Proto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3Proto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.State.PlayStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Proto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Proto(Vector3Proto other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Proto Clone() {
      return new Vector3Proto(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3Proto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3Proto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3Proto other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransformProto : pb::IMessage<TransformProto> {
    private static readonly pb::MessageParser<TransformProto> _parser = new pb::MessageParser<TransformProto>(() => new TransformProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransformProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.State.PlayStateReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformProto(TransformProto other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformProto Clone() {
      return new TransformProto(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Google.Protobuf.State.Vector3Proto position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.State.Vector3Proto Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::Google.Protobuf.State.Vector3Proto rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.State.Vector3Proto Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 3;
    private global::Google.Protobuf.State.Vector3Proto scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.State.Vector3Proto Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransformProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransformProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (scale_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Scale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransformProto other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Google.Protobuf.State.Vector3Proto();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Google.Protobuf.State.Vector3Proto();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          scale_ = new global::Google.Protobuf.State.Vector3Proto();
        }
        Scale.MergeFrom(other.Scale);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Google.Protobuf.State.Vector3Proto();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              rotation_ = new global::Google.Protobuf.State.Vector3Proto();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 26: {
            if (scale_ == null) {
              scale_ = new global::Google.Protobuf.State.Vector3Proto();
            }
            input.ReadMessage(scale_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayState : pb::IMessage<PlayState> {
    private static readonly pb::MessageParser<PlayState> _parser = new pb::MessageParser<PlayState>(() => new PlayState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.State.PlayStateReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayState(PlayState other) : this() {
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      animState_ = other.animState_;
      health_ = other.health_;
      killCount_ = other.killCount_;
      deathCount_ = other.deathCount_;
      roomId_ = other.roomId_;
      clntName_ = other.clntName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayState Clone() {
      return new PlayState(this);
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 1;
    private global::Google.Protobuf.State.TransformProto transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.State.TransformProto Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    /// <summary>Field number for the "animState" field.</summary>
    public const int AnimStateFieldNumber = 2;
    private int animState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimState {
      get { return animState_; }
      set {
        animState_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 3;
    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "killCount" field.</summary>
    public const int KillCountFieldNumber = 4;
    private int killCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillCount {
      get { return killCount_; }
      set {
        killCount_ = value;
      }
    }

    /// <summary>Field number for the "deathCount" field.</summary>
    public const int DeathCountFieldNumber = 5;
    private int deathCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeathCount {
      get { return deathCount_; }
      set {
        deathCount_ = value;
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 6;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "clntName" field.</summary>
    public const int ClntNameFieldNumber = 7;
    private string clntName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClntName {
      get { return clntName_; }
      set {
        clntName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transform, other.Transform)) return false;
      if (AnimState != other.AnimState) return false;
      if (Health != other.Health) return false;
      if (KillCount != other.KillCount) return false;
      if (DeathCount != other.DeathCount) return false;
      if (RoomId != other.RoomId) return false;
      if (ClntName != other.ClntName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (AnimState != 0) hash ^= AnimState.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (KillCount != 0) hash ^= KillCount.GetHashCode();
      if (DeathCount != 0) hash ^= DeathCount.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (ClntName.Length != 0) hash ^= ClntName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transform_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transform);
      }
      if (AnimState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AnimState);
      }
      if (Health != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Health);
      }
      if (KillCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(KillCount);
      }
      if (DeathCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DeathCount);
      }
      if (RoomId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RoomId);
      }
      if (ClntName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ClntName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (AnimState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimState);
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (KillCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillCount);
      }
      if (DeathCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeathCount);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (ClntName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClntName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayState other) {
      if (other == null) {
        return;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          transform_ = new global::Google.Protobuf.State.TransformProto();
        }
        Transform.MergeFrom(other.Transform);
      }
      if (other.AnimState != 0) {
        AnimState = other.AnimState;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.KillCount != 0) {
        KillCount = other.KillCount;
      }
      if (other.DeathCount != 0) {
        DeathCount = other.DeathCount;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.ClntName.Length != 0) {
        ClntName = other.ClntName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transform_ == null) {
              transform_ = new global::Google.Protobuf.State.TransformProto();
            }
            input.ReadMessage(transform_);
            break;
          }
          case 16: {
            AnimState = input.ReadInt32();
            break;
          }
          case 24: {
            Health = input.ReadInt32();
            break;
          }
          case 32: {
            KillCount = input.ReadInt32();
            break;
          }
          case 40: {
            DeathCount = input.ReadInt32();
            break;
          }
          case 48: {
            RoomId = input.ReadInt32();
            break;
          }
          case 58: {
            ClntName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HitState : pb::IMessage<HitState> {
    private static readonly pb::MessageParser<HitState> _parser = new pb::MessageParser<HitState>(() => new HitState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.State.PlayStateReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitState(HitState other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      damage_ = other.damage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitState Clone() {
      return new HitState(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private string from_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private string to_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 3;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (Damage != other.Damage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(To);
      }
      if (Damage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Damage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitState other) {
      if (other == null) {
        return;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            From = input.ReadString();
            break;
          }
          case 18: {
            To = input.ReadString();
            break;
          }
          case 24: {
            Damage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorldState : pb::IMessage<WorldState> {
    private static readonly pb::MessageParser<WorldState> _parser = new pb::MessageParser<WorldState>(() => new WorldState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorldState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.State.PlayStateReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldState(WorldState other) : this() {
      roomId_ = other.roomId_;
      clntName_ = other.clntName_;
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      fired_ = other.fired_;
      health_ = other.health_;
      hit_ = other.hit_;
      hitState_ = other.hitState_ != null ? other.hitState_.Clone() : null;
      killPoint_ = other.killPoint_;
      deathPoint_ = other.deathPoint_;
      animState_ = other.animState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldState Clone() {
      return new WorldState(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "clntName" field.</summary>
    public const int ClntNameFieldNumber = 2;
    private string clntName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClntName {
      get { return clntName_; }
      set {
        clntName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 3;
    private global::Google.Protobuf.State.TransformProto transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.State.TransformProto Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    /// <summary>Field number for the "fired" field.</summary>
    public const int FiredFieldNumber = 4;
    private bool fired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Fired {
      get { return fired_; }
      set {
        fired_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 5;
    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "hit" field.</summary>
    public const int HitFieldNumber = 6;
    private bool hit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hit {
      get { return hit_; }
      set {
        hit_ = value;
      }
    }

    /// <summary>Field number for the "hitState" field.</summary>
    public const int HitStateFieldNumber = 7;
    private global::Google.Protobuf.State.HitState hitState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.State.HitState HitState {
      get { return hitState_; }
      set {
        hitState_ = value;
      }
    }

    /// <summary>Field number for the "killPoint" field.</summary>
    public const int KillPointFieldNumber = 8;
    private int killPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillPoint {
      get { return killPoint_; }
      set {
        killPoint_ = value;
      }
    }

    /// <summary>Field number for the "deathPoint" field.</summary>
    public const int DeathPointFieldNumber = 9;
    private int deathPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeathPoint {
      get { return deathPoint_; }
      set {
        deathPoint_ = value;
      }
    }

    /// <summary>Field number for the "animState" field.</summary>
    public const int AnimStateFieldNumber = 10;
    private int animState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimState {
      get { return animState_; }
      set {
        animState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorldState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorldState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (ClntName != other.ClntName) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      if (Fired != other.Fired) return false;
      if (Health != other.Health) return false;
      if (Hit != other.Hit) return false;
      if (!object.Equals(HitState, other.HitState)) return false;
      if (KillPoint != other.KillPoint) return false;
      if (DeathPoint != other.DeathPoint) return false;
      if (AnimState != other.AnimState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (ClntName.Length != 0) hash ^= ClntName.GetHashCode();
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (Fired != false) hash ^= Fired.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (Hit != false) hash ^= Hit.GetHashCode();
      if (hitState_ != null) hash ^= HitState.GetHashCode();
      if (KillPoint != 0) hash ^= KillPoint.GetHashCode();
      if (DeathPoint != 0) hash ^= DeathPoint.GetHashCode();
      if (AnimState != 0) hash ^= AnimState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (ClntName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClntName);
      }
      if (transform_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Transform);
      }
      if (Fired != false) {
        output.WriteRawTag(32);
        output.WriteBool(Fired);
      }
      if (Health != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Health);
      }
      if (Hit != false) {
        output.WriteRawTag(48);
        output.WriteBool(Hit);
      }
      if (hitState_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(HitState);
      }
      if (KillPoint != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(KillPoint);
      }
      if (DeathPoint != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(DeathPoint);
      }
      if (AnimState != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AnimState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (ClntName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClntName);
      }
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (Fired != false) {
        size += 1 + 1;
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (Hit != false) {
        size += 1 + 1;
      }
      if (hitState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HitState);
      }
      if (KillPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillPoint);
      }
      if (DeathPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeathPoint);
      }
      if (AnimState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorldState other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.ClntName.Length != 0) {
        ClntName = other.ClntName;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          transform_ = new global::Google.Protobuf.State.TransformProto();
        }
        Transform.MergeFrom(other.Transform);
      }
      if (other.Fired != false) {
        Fired = other.Fired;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.Hit != false) {
        Hit = other.Hit;
      }
      if (other.hitState_ != null) {
        if (hitState_ == null) {
          hitState_ = new global::Google.Protobuf.State.HitState();
        }
        HitState.MergeFrom(other.HitState);
      }
      if (other.KillPoint != 0) {
        KillPoint = other.KillPoint;
      }
      if (other.DeathPoint != 0) {
        DeathPoint = other.DeathPoint;
      }
      if (other.AnimState != 0) {
        AnimState = other.AnimState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 18: {
            ClntName = input.ReadString();
            break;
          }
          case 26: {
            if (transform_ == null) {
              transform_ = new global::Google.Protobuf.State.TransformProto();
            }
            input.ReadMessage(transform_);
            break;
          }
          case 32: {
            Fired = input.ReadBool();
            break;
          }
          case 40: {
            Health = input.ReadInt32();
            break;
          }
          case 48: {
            Hit = input.ReadBool();
            break;
          }
          case 58: {
            if (hitState_ == null) {
              hitState_ = new global::Google.Protobuf.State.HitState();
            }
            input.ReadMessage(hitState_);
            break;
          }
          case 64: {
            KillPoint = input.ReadInt32();
            break;
          }
          case 72: {
            DeathPoint = input.ReadInt32();
            break;
          }
          case 80: {
            AnimState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
